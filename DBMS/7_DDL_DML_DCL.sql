--[7] DDL, DCL, DML
--SQL = DDL(객체 - 생성, 삭제, 구조 변경, 제거) 
--    + DML(데이터 - 입력, 삭제, 수정, 검색) 
--    + DCL(권한 - 계정 생성, 권한 부여, 권한 박탈, 트랜잭션명령)

--+++DDL+++

--1. 테이블 생성
CREATE TABLE BOOK(
    BOOKID NUMBER(4),--정수 네자리
    BOOKNAME VARCHAR2(20),--문자 20자리
    PUBLISHER VARCHAR2(20),
    RDATE DATE,--날짜 형식
    PRICE NUMBER(8),
    PRIMARY KEY(BOOKID)--테이블 내 주키(유일한 필드), NULL 불가능
); 
DROP TABLE BOOK; --테이블 삭제
CREATE TABLE BOOK(
    BOOKID NUMBER(4) PRIMARY KEY,
    BOOKNAME VARCHAR2(20),
    PUBLISHER VARCHAR2(20),
    RDATE DATE,
    PRICE NUMBER(8)
);
SELECT * FROM BOOK;

--EMP01 TABLE : EMPNO, ENAME, SAL
CREATE TABLE EMP01(
    EMPNO NUMBER(4),
    ENAME VARCHAR2(20),
    SAL NUMBER(7,2)
);
SELECT * FROM EMP01;
--DEPT01 TABLE: DEPTNO, DNAME, LOC
CREATE TABLE DEPT01(
    DEPTNO NUMBER(2),
    DNAME VARCHAR2(14),
    LOC VARCHAR2(13)
);
SELECT * FROM DEPT01;

--EMP02: 서브쿼리를 이용한 테이블 생성
CREATE TABLE EMP02
    AS
    SELECT * FROM EMP;--서브쿼리 결과만 들어옴 , 제약 조건은 들어오지 않음
SELECT * FROM EMP02;
INSERT INTO EMP02 (EMPNO, ENAME, DEPTNO) VALUES(7369, 'PAUL', 90);
--EMP03: EMPNO, ENAME, DEPTNO만 추출
CREATE TABLE EMP03
    AS
    SELECT EMPNO, ENAME, DEPTNO FROM EMP;
SELECT * FROM EMP03;
--EMP04: 10번 부서만 추출
CREATE TABLE EMP04
    AS
    SELECT * FROM EMP WHERE DEPTNO = 10;
SELECT * FROM EMP04;
--EMP05: 구조만 추출
CREATE TABLE EMP05
    AS
    SELECT * FROM EMP WHERE 1=0;--거짓 조건으로 구조만 넘긴다
SELECT * FROM EMP05;

--2.테이블 구조 변경
--(1) 필드 추가 -ADD
ALTER TABLE EMP03 ADD (JOB VARCHAR2(10), SAL NUMBER(7,2));
SELECT * FROM EMP03;
--(2) 필드 타입 수정 -MODIFY
ALTER TABLE EMP03 MODIFY (EMPNO VARCHAR2(5));--숫자 데이터가 들어가있는 상태 > 에러
ALTER TABLE EMP03 MODIFY (JOB VARCHAR2(5));
ALTER TABLE EMP03 MODIFY (ENAME VARCHAR2(200));
ALTER TABLE EMP03 MODIFY (ENAME VARCHAR2(5));--6BYTE가 존재하여 변경 불가능
--(3) 필드 삭제 -DROP
ALTER TABLE EMP03 DROP COLUMN JOB;--필드 삭제
ALTER TABLE EMP03 DROP COLUMN DEPTNO;--데이터도 함께 삭제, 복구 불가능(DML만 ROLLBACK 가능)
--논리적으로 필드 접근 제한 > 물리적으로 필드 삭제
ALTER TABLE EMP03 SET UNUSED(SAL); --접근 제한
ALTER TABLE EMP03 DROP UNUSED COLUMNS; --필드 삭제

--3. 테이블 삭제
DROP TABLE EMP01;--테이블 삭제
DROP TABLE DEPT; -- 자식 테이블, 참조하는 테이블 먼저 삭제해야 삭제 가능

--4. 테이블 내 데이터 제거
TRUNCATE TABLE EMP02; --복구 불가능

--5. 테이블 이름 변경
RENAME EMP03 TO EMP3; 

--6. 데이터 딕셔너리 > 사용자가 접근 불가능 > 데이터 딕셔너리뷰 접근 가능
--DBA_XXX / USER_XXX / ALL_XXX
--USER: 사용자 권한
SELECT * FROM USER_TABLES;
SELECT TABLE_NAME FROM USER_TABLES;
SELECT * FROM USER_INDEXES;
SELECT * FROM USER_CONSTRAINTS;
SELECT * FROM USER_VIEWS;
SHOW USER;

--DBA: DBA 권한을 가진 사용자만 사용 가능
SELECT * FROM DBA_TABLES;
SELECT TABLE_NAME FROM DBA_TABLES;
SELECT * FROM DBA_INDEXES;
SELECT * FROM DBA_CONSTRAINTS;
SELECT * FROM DBA_VIEWS;

--ALL: SCOTT이 소유한 객체나 권한이 부여된 객체
SELECT * FROM ALL_TABLES;
SELECT TABLE_NAME FROM ALL_TABLES;
SELECT * FROM ALL_INDEXES;
SELECT * FROM ALL_CONSTRAINTS;
SELECT * FROM ALL_VIEWS;

--+++DML+++
--1. INSERT
--INSERT INTO table_name (column_name, ..) VALUES (column_values, …);
SELECT * FROM DEPT01;
INSERT INTO DEPT01 (DEPTNO, DNAME, LOC) VALUES (10, 'ACCOUNTING', 'NEW YORK'); --순서대로 입력
INSERT INTO DEPT01 (DEPTNO, LOC, DNAME) VALUES (20, 'BOSTON', 'SALES'); --컬럼 순서 변경 가능
INSERT INTO DEPT01 (DEPTNO, DNAME, LOC) VALUES (30, 'IT', NULL);
INSERT INTO DEPT01 (DEPTNO, DNAME) VALUES (40, 'OPERATION'); --자동으로 NULL
SELECT * FROM DEPT01;
INSERT INTO DEPT01 VALUES(50, 'DESIGN', 'CALIFORNIA'); --반드시 모든 필드의 값 입력
DESC DEPT01; --PK가 없음
--DEPT01테이블에 DEPT 테이블 10~30번 부서 값 INSERT
INSERT INTO DEPT01 SELECT * FROM DEPT WHERE DEPTNO < 40;
COMMIT;--DML 트랜잭션 작업 반영
ROLLBACK;--DML 트랜잭션 작업 취소

--ex)
CREATE TABLE SAM01(
    EMPNO NUMBER(4) PRIMARY KEY,
    ENAME VARCHAR2(10),
    JOB VARCHAR2(9), 
    SAL NUMBER(7,2)
); 
INSERT INTO SAM01 VALUES (1000, 'APPLE', 'POLICE', 10000);
INSERT INTO SAM01 VALUES (1010, 'BANANA', 'NURSE', 15000);
INSERT INTO SAM01 VALUES (1020, 'ORANGE', 'DOCTOR', 25000);
INSERT INTO SAM01 VALUES (1030, 'VERY', NULL, 25000);
INSERT INTO SAM01 VALUES (1040, 'CAT', NULL, 2000);
INSERT INTO SAM01 SELECT EMPNO, ENAME, JOB, SAL FROM EMP WHERE DEPTNO = 10;
SELECT * FROM SAM01;
COMMIT;

--2. UPDATE
--UPDATE table_name SET column_name1=value1, column_name2 = value2, WHERE condition;
CREATE TABLE EMP01
    AS SELECT * FROM EMP;
--부서번호 30으로 수정
UPDATE EMP01 SET DEPTNO = 30;
--모든 직원의 급여를 10% 인상
UPDATE EMP01 SET SAL=SAL*1.1;
SELECT * FROM EMP01;
COMMIT;

--특정 행의 데이터만 변경시 WHERE 사용
UPDATE EMP01 SET HIREDATE = SYSDATE, DEPTNO = 20 WHERE DEPTNO = 30;
SELECT * FROM EMP01;
UPDATE EMP01 SET SAL = SAL*1.1 WHERE SAL > 3000;
SELECT * FROM EMP01;
UPDATE EMP01 SET SAL = SAL+1000 WHERE (SELECT DEPTNO FROM DEPT WHERE LOC = 'DALLAS') = DEPTNO;
SELECT * FROM EMP01;
--##SCOTT사원의 부서번호는 20으로 JOB은 MANGER로 수정
UPDATE EMP01 SET DEPTNO = 20, JOB = 'MANAGER' WHERE ENAME = 'SCOTT';
SELECT * FROM EMP01;
UPDATE EMP01 SET HIREDATE = SYSDATE, SAL = 50, COMM = 400 WHERE ENAME = 'SCOTT';
SELECT * FROM EMP01;
--서브쿼리 이용
UPDATE DEPT01 SET LOC = 'MAPO' WHERE DEPTNO = 40;
UPDATE DEPT01 SET (DNAME, LOC) = (SELECT DNAME, LOC FROM DEPT01 WHERE DEPTNO = 40) WHERE DEPTNO = 20;
SELECT * FROM DEPT01;
UPDATE EMP01 SET (SAL, HIREDATE) = (SELECT SAL, HIREDATE FROM EMP01 WHERE ENAME = 'KING');
SELECT * FROM EMP01;
COMMIT;
--3. DELETE
--DELETE FROM table_name WHERE conditions ;
DELETE FROM EMP01 WHERE ENAME = 'ALLEN'; --데이터 삭제, ROLLBACK 가능
SELECT * FROM EMP01;
ROLLBACK;
DELETE FROM EMP01 WHERE COMM IS NULL;
SELECT * FROM EMP01;
DELETE FROM EMP01 WHERE DEPTNO = (SELECT DEPTNO FROM DEPT WHERE DNAME = 'RESERACH');

--ex)
CREATE TABLE EMP00(
    ID NUMBER(4) PRIMARY KEY,
    NAME VARCHAR2(10),
    USERID VARCHAR2(30),
    SALARY NUMBER(10,2)
);
INSERT INTO EMP00 VALUES (1, 'SCOTT', 'SSCOTT', 10000);
INSERT INTO EMP00 VALUES (2, 'FORD', 'FFORD', 13000);
INSERT INTO EMP00 VALUES (3, 'PATEL', 'PPATEL', 33000);
INSERT INTO EMP00 VALUES (4, 'REPORT', 'RREPORT', 23500);
INSERT INTO EMP00 VALUES (5, 'GOOD', 'GGOOD', 44450);
SELECT * FROM EMP00;
COMMIT;
UPDATE EMP00 SET SALARY = 65000 WHERE ID = 3;
SELECT * FROM EMP00;
COMMIT;
DELETE FROM EMP00 WHERE NAME = 'FORD';
SELECT * FROM EMP00;
COMMIT;
UPDATE EMP00 SET SALARY = 15000 WHERE SALARY <= 15000;
SELECT * FROM EMP00;
COMMIT;
DROP TABLE EMP00;

--ERD
--구조화된 데이터를 저장하기 위해 DB를 이용하는데, 구조와 제약조건등 다양한 기법을 설계하는 툴

CREATE TABLE DEPT1(
    DEPTNO NUMBER(2) PRIMARY KEY,
    DNAME VARCHAR2(14),
    LOC VARCHAR2(13)
);
SELECT * FROM DEPT1;

CREATE TABLE EMP1(
    EMPNO NUMBER(2) PRIMARY KEY, 
    ENAME VARCHAR2(10) UNIQUE,
    JOB VARCHAR2(9) NOT NULL,
    MGR NUMBER(4),
    HIREDATE DATE DEFAULT SYSDATE,
    SAL NUMBER(7,2) CHECK (SAL>0),
    COMM NUMBER(7,2),
    DEPTNO NUMBER(2) REFERENCES DEPT1(DEPTNO)
);
SELECT * FROM EMP1;

INSERT INTO DEPT1 VALUES(10,'회계', '신촌');
INSERT INTO DEPT1 VALUES(20,'설계', '마포');
INSERT INTO DEPT1 VALUES(30,'영업', '합정');
INSERT INTO DEPT1 VALUES(40,'전산', '상수');
SELECT * FROM DEPT1;
ALTER TABLE EMP1 MODIFY (EMPNO VARCHAR2(4));
INSERT INTO EMP1 (EMPNO, ENAME, JOB, MGR, SAL, DEPTNO) 
    VALUES(1111,'홍가', '회장', NULL, 9000, 40);
INSERT INTO EMP1 (EMPNO, ENAME, JOB, MGR, SAL, DEPTNO) 
    VALUES(1112,'홍나', '전무', 1111, 7000, 30);
SELECT * FROM EMP1;
INSERT INTO EMP1 (EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, DEPTNO) 
    VALUES(1113,'홍다', '대표', 1111, TO_DATE('20201230', 'YYYYMMDD'), 8000, 10);

DROP TABLE STUDENT;
DROP TABLE MAJOR;

CREATE TABLE MAJOR(
    MAJOR_CODE NUMBER(2) PRIMARY KEY,
    MAJOR_NAME VARCHAR2(100) NOT NULL,
    MAJOR_LOC VARCHAR2(255) NOT NULL
);
SELECT * FROM MAJOR;

CREATE TABLE STUDENT(
    ST_CODE VARCHAR2(10) PRIMARY KEY, 
    ST_NAME VARCHAR2(30),
    ST_SCORE NUMBER(3),
    MAJOR_CODE NUMBER(2) REFERENCES MAJOR(MAJOR_CODE)
    --FOREIGN KEY(MAJOR_CODE) REFERENCES MAJOR(MAJOR_CODE);
);
SELECT * FROM STUDENT;

INSERT INTO MAJOR VALUES (1,'경영정보', '3층 인문실');
INSERT INTO MAJOR VALUES (2,'소프트웨어공학', '3층 인문실');
INSERT INTO MAJOR VALUES (3,'디자인', '4층 과학실');
INSERT INTO MAJOR VALUES (4,'경제', '4층 과학실');

INSERT INTO STUDENT VALUES ('A01', '김길동', 100, 1);
INSERT INTO STUDENT VALUES ('A02', '문길동', 90, 2);
INSERT INTO STUDENT VALUES ('A03', '홍길동', 95, 1);

DROP TABLE BOOK; --CASCADE: 참조 상관 없이 삭제
DROP TABLE BOOKCATEGORY;

CREATE TABLE BOOKCATEGORY(
    CATEGORY_CODE NUMBER(3) PRIMARY KEY,
    CATEGORY_NAME VARCHAR2(30) NOT NULL,
    OFFICE_LOC VARCHAR2(30)
);
SELECT * FROM BOOKCATEGORY;

CREATE TABLE BOOK(
    CATEGORY_CODE NUMBER(3) REFERENCES BOOKCATEGORY(CATEGORY_CODE),
    BOOKNO VARCHAR2(10) PRIMARY KEY,
    BOOKNAME VARCHAR2(30) NOT NULL,
    PUBLISHER VARCHAR2(30),
    PUBYEAR NUMBER(4) DEFAULT TO_CHAR(SYSDATE, 'YYYY')
);
SELECT * FROM BOOK;

INSERT INTO BOOKCATEGORY VALUES (100, '철학', '3층 인문실');
INSERT INTO BOOKCATEGORY VALUES (200, '인문', '3층 인문실');
INSERT INTO BOOKCATEGORY VALUES (300, '자연과학', '4층 과학실');
INSERT INTO BOOKCATEGORY VALUES (400, 'IT', '4층 과학실');

INSERT INTO BOOK VALUES (100, '100A01', '철학자의 삶', '더존출판', 2017);
INSERT INTO BOOK VALUES (400, '400A01', '이것이 DB다', '더존출판', 2018);
INSERT INTO BOOK (CATEGORY_CODE, BOOKNO, BOOKNAME, PUBLISHER) VALUES (200, '200A01', 'ORACLE', '더존출판');


--+++DCL+++
--SCOTT이 DBA권한을 가짐
--계정 추가
CREATE USER kim IDENTIFIED BY tiger; --kim 계정 추가(DBA권한)
--권한 부여
GRANT CREATE SESSION, CREATE TABLE TO kim;--로그인, 테이블 작성 권한
GRANT SELECT ON EMP TO kim; --EMP SELECT ACCESS권한 
SHOW USER;
--권한 박탈
REVOKE SELECT ON EMP FROM kim;
DROP USER kim CASCADE;
COMMIT;