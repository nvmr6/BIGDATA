2. 자료형과 연산자

[1] 변수
:변하는 값을 저장
>이름을 부여해 다른 변수 또는 자료와 구분해서 사용할 수 있도록 함

변수 선언: 값을 저장할 수 있는 변수를 만드는 것, 선언을 위한 타입이 없음, 선언 과정 없음
변수 할당: 값이 이름을 갖게 함

id(): 주소 값
del: 현재 커널의 변수 삭제
whos: 변수 목록 확인
help(): 도움말

[2]화면 입출력
input(): 사용자로부터 값을 입력 받기 위한 함수
print(): 출력 함수
%s: 문자열 %c: 문자 %d: 정수 %f: 실수: %x: 16진수 %o8: 8진수 %% 문자%

[3]기본 자료형
-프로그래밍 언어들은 변수가 가져야 할 값의 크기 , 형식 , 범위 등에 따라서
값의 유형을 정해 놓고 사용
-프로그래밍 언어에서 정수 , 실수 , 논리 등 여러 종류의 자료 데이터 가 어떤
값을 가질 수 있는지에 대해 알려주는 속성
-변수에 저장할 수 있는 값의 범위 또는 크기 와 값을 저장하는 방식 이 달라
짐
>int / float / double / boolean / char / string / complex

*여러줄 표현: """ """
*줄 바꿈: \ 
*문자열 연결: *, + 사용
*문자열 인덱싱: 0부터 시작
*문자열 슬라이싱
[a,b]: 부분 문자열을 빼낼 수 있음
[a,b,c]: 매 스텝번째 아이템 추출
*false 처리: NULL, ' '

[4]포맷팅
:문자 , 숫자 , 날짜 데이터에 형식을 지정하는 것
-인덱스 : 출력할 인수의 인덱스(순서)
-정렬방법 : <기호는 왼쪽정렬, >기호는 오른쪽정렬, ^기호는 가운데 정렬
-자릿수 : 출력할 자릿수 지정. 변수보다 적은 자릿수가 지정될 경우 무시되고 변수가 다 출력.
-타입 : d는 10진수, f는 실수, s는 문자, b는 2진수, o는 8진수, x는 16진수

>'{[인덱스]:[공백대체문자][정렬방법][자릿수][타입]}'.format(변수명)

ex)
"{0} is {1}years old {0}".format(name, age)
-인덱스 지정 가능 (인덱스 생략시엔 포맷과 변수 갯수가 일치해야 한다)
print("출력 : [{}], [{:10}], [{:3}]".format(a, a, a))
-숫자의 경우 출력할 변수보다 큰 자릿수를 지정하면 오른쪽 정렬(기본값)
-문자의 경우 출력할 변수보다 큰 자릿수를 지정하면 왼쪽 정렬(기본값)
print("print: [{0:$>10d}],[{1:*<20}],[{1:_<10.3}]".format(a,s))
-공백대체문자를 지정할 때는 정렬기호, 자릿수 표현
print("출력 : [{:*=+10}] [{:$=+10}] [{:_=+010}]".format(b, a, a))
- +를 붙이면 양수의 경우 숫자앞에 부호를 붙여줌
- =를 붙이면 전체 자릿수만큼 출력하는 문자의 맨 앞에 부호 표시(양수는 부호나타나지 않음)
- =+를 사용하면 =도 표시
- 자리수앞에 0을 채우면 빈자리에 0을 채워
- 공백대체문자는 =앞에
- 공백대체문자와 자리수 앞에 0을 붙이는 것을 같이 자리수앞에 0이 무시
- (공백대체문자와 자리수 앞 0은 공백대체문자가 우선순위가 높음)
print("출력 : [{:{dir}{sign}{width}.{precision}}]".format(a, 
                dir='>',sign='+', width=10, precision=3))
-가독성을 높이고자 포맷인자에 이름을 부여

*날짜 출력
%Y는 연도4자리, %y는 연도2자리, %m은 월, %d는 일
%H는 24시간, %I는 12시간, %p는 PM또는AM, %M은 분, %S는 초를 의미
>print(strftime("%Y년 %m월 %d일 %p %I:%M:%S", now))

[5] 연산자
산술 연산자, 대입 연산자, 비교 연산자

*논리 연산자
&, |, and, or, not
ex)
print((10>3) & (10>5)) # 논리연산자 True & True
print(12 & 1)          # 비트연산   1100 & 0001
print(5 < 8 < 10 < 100)      # 논리연산자를 삼항, 사항, .. 가능
# and 연산자 : 거짓으로 판별되는 첫번째 항의 결과가 반환
	       모든 항이 참이면 마지막 항의 결과 반환
# or 연산자 : 참으로 판별되는 첫번째 항의 결과가 반환
	      모든 항이 거짓이면 마지막 항의 결과 반환

*비트 연산자
ex)
a = 15 # 1111
b = 2 # 0010
print(a&b)
print(a|b)
print(a^b)
print(a >> 2) #shift

[6] 문자열 다루기
문자열 슬라이싱
len()
upper(): 대문자
lower(): 소문자
title(): 앞글자 대문자
capitalize(): 첫문자 대문자
count('str'): 문자열이 몇개인지
find('str'): 문자열의 인덱스(왼쪽부터)
rfind('str'): 문자열의 인덱스(오른쪽부터)
startwith('str'): 특정 문자열로 시작하는지
endwith('str'): 특정 문자열로 끝나는지
strip(): 좌우 공백 제거
isdigit: 문자열이 숫자인지
islower: 소문자인지
isupper: 대문자인지

[7] 날짜 형식
-날짜
from datetime import date
someday = date(2021,2,22)
print("{:%Y %m %d %H %M %S}".format(someday))
today = date.today()
-시간
from datetime import time
t = time(7)
-날짜와 시간
from datetime import datetime
now = datetime.now()
-시간대
from datetime import datetime
import pytz
tz_NY = pytz.timezone('America/New_York')
datetime_NY = datetime.now(tz_NY)
print(datetime_NY)