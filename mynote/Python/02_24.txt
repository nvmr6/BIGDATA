[5] 함수
-입력 값을 받아 다른 값을 출력하도록 미리 만들어져 있는 것
-반복해서 사용한 코드들을 묶어 놓고 그것에 이름을 붙인 것
-반복해서 사용할 코드는 함수를 이용하면 훨씬 구조적이고 간결한 코드를 작성할 수 있음
>def function_name(par1,par2,...):
	expression
*매개변수 : 함수 정의 시 지정하는 함수가 실행을 위해 필요하는 값을 받을 변수들
*인수: 함수 호출 시 함수 실행을 위해 전달하는 값

1.2 docstring
:함수 본문의 첫 번째 문장에 문자열을 포함(함수 설명)

1.3 지역변수와 전역변수
전역 변수: 어디서든 사용 가능
지역 변수: 함수 내에서만 사용

ex)
global_var = 100 #전역변수
def fun1():
    print(global_var)
fun1()

def fun2():
    local_var = 200#지역변수
    print(local_var)
fun2()

global_var = 100
def fn1():
    global_var = 200#전역 변수 수정
    print(global_var)
print(global_var)
fn1()
print(global_var)

1.4 값에 의한 호출
ex)
def fn1(foo):
    print('before: ', foo, '의 주소:', id(foo))
    foo = foo *3
    print('after: ', foo, '의 주소:', id(foo))
fn1(foo)#값에 의한 호출은 주소가 변경

1.5 참조에 의한 호출
ex)
def fn2(foo):#지역 변수
    print('before: ', foo, '의 주소:', id(foo))
    foo.append(6)
    print('after: ', foo, '의 주소:', id(foo))
fn2(L)
print(L, id(L))#참조에 의한 호출 > 주소가 바뀌지 않음

1.5 함수 이름 변경
>변수처럼 변경 가능

2.1 return
:함수의 결과 값을 반환하기 위한 키워드, 모든 자료형 가능
ex)
def fibonacci(n):
    "n값 미만 피보나치 수열 return"
    a,b = 0,1
    result = []
    while a < n:
        result.append(a)
        a,b = b, a+b
    return result
fibonacci(10)

2.2 여러 값 반환
:여러 값 반환시 튜플에 저장되어 반환
ex)
def swap(a,b):
    return b,a #tuple로 반환
x,y = 1,2
print(x,y)
x,y = swap(x,y)
print(x,y)

3.1 기본값을 갖는 매개변수
:하나 이상의 인수에 대한 기본값을 지정
*가변 인수:함수를 정의할 때에 허용하도록 정의 
인수의 수 보다 적은 인수로 호출 할 수 있음
ex)
def make_url(ip, port=80):

3.2 기본 변수를 갖는 매개변수
:함수의 매개변수가 기본 값으로 변수 이름을 가질 수 있음,
이때 기본 값은 함수가 정의되는 지점에 평가됨
ex)
i=5
def fn2(arg=i): # 기본값 셋팅, 정의되는 시점에서 한번 평가
    print('arg = ',arg)

3.3 변형 가능한 객체를 갖는 매개변수
:기본 변수가 리스트, 딕셔너리 또는 대부분의 
클래스의 인스턴스와 같은 변경 가능한 객체 일 때 호출시마다 전달된 인수를 사용
ex)
list_ = []
def fn3(a, L=list_): #빈 리스트롤 지정
    L.append(a)
    return L
print(fn3(1))

3.4 순서 인수와 키워드 인수
:순서 인수와 키워드 인수가 같이 올 때는 키워드 인수가 반드시 뒤에 온다
>
-파라미터 이름을 포함한 인수 사용시 순서를 바꿀 수 있음
-기본값을 갖는 파라미터는 생략 가능
-필수 인수를 포함하지 않으면 에러

3.5 튜플 매개변수
:매개변수 앞에 *를 붙여 정의, 인수들이 튜플에 저장되어 전달
>
-가변 인수 앞에 0 개 이상의 일반 인수가 올 수 있음
-가변 인수는 함수에 전달되는 나머지 모든 입력 인수를 스쿠핑하기 
때문에 형식 인수 목록의 마지막에 음
-*args 매개변수 다음에 나오는 형식적 매개 변수는 ‘키워드 전용’ 인수
ex)
def add(*args):
    sum = 0
    for i in args:
        sum += i
    return sum
add(1,2,3,4,5,6,7,8,9)

3.6 딕셔너리 매개변수
:**name 형식의 최종 형식 매개 변수가 있으면 형식 매개 변수에 해당하는 것을
 제외하고 모든 키워드 인수가 들어있는 딕셔너리를 받음
>
딕셔너리 인수는 위치 인수, 키워드 인수, 그리고 튜플을 받는 *name 형식의 
가변 인수와 같이 사용될 수 있음
-*name은 **name 앞에 나와야 함
ex)
def fn5(**args):#**args: 딕셔너리로 전달
    for item in args.items():
        print(item)
fn5(name="hong", age="23", gender="male") 

3.7 언패킹
인수가 이미 있지만 별도의 위치 인수가 필요한 함수 호출에 대해 압축을 풀어야하는 경우에는 반대 상황이 발생
>tuple > * , dictionary > **

4.1 람다식
:람다식은 작은 익명함수를 의미
>lambda var: var_statement
>
-람다식은 함수 객체가 필요한 곳이면 어디서든지 사용할 수 있음
-람다식은 한 개의 문장(표현식)만 작성할 수 있음
-중첩 된 함수 정의와 마찬가지로 람다 함수는 포함 된 범위(scope)의 변수들을 참조 할 수 있음
ex)lambda a,b:a+b

4.2 인수에 이용
:람다식의 다른 용도는 작은 함수를 인수로 전달하는 것
ex)
def map_template(fn, L=[]):
    result=[]
    for i in L:
        result.append(fn(i))
    return result
map_template(lambda x:x*2, list_data)
#map()
list(map(lambda x:x*2, list_data))
#list comprehension
[x*2 for x in list_data]

4.3 리턴문에 이용
:리턴문에 함수의 이름을 사용, 리턴문의 함수는 반드시 지역함수일 필요는 없음
ex)
def make_boxL(shape):
    if len(shape) == 1:
        return lambda x:[x]*shape[0]
    elif len(shape)==2:
        return lambda x:[[x]*shape[1]]*shape[0]
box1 = make_boxL([5,])
box1(10)
