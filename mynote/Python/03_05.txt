[11] N차원 배열
3. 배열 합치기

-인덱싱 / 슬라이싱
다차원 배열 슬라이싱
>np_array_obj [ start stop ] / np_array_obj [ start stop step ]
차원이 여러 개 인 경우 콤마로 구분해서 각 차원 별로 start, stop 인덱스를 지정

-hstack(), vstack (), dstack
-hstack: 배열을 옆에 추가하는 방식으로 쌓아 합침
-vstack: 배열을 아래에 추가하는 방식으로 쌓아 합침
-dstack: 3 번째 축을 쌓아 합침

*column_stack: 1 차원 배열을 열 단위로 배열하여 2 차원 배열을 만듬

-newaxis 속성
:hstack 을 이용해 1 차원 배열을 열 단위로 쌓으려면 newaxis 를 이용
해서 1 차원 배열이 2 차원 구조가 되도록 해야 함
>newaxis 속성은 2 차원 컬럼 벡터를 갖도록 함

-stack()
:축 속성 axis 의 값에 따라 배열을 합침
>axis 매개 변수는 결과의 차원에서 새 축의 인덱스를 지정

-r_(), c_()
:한 개의 축을 따라 번호를 나열해 배열을 만들 때
유용

-배열 분할
-hsplit(): 반환 할 동등한 모양의 배열 수를 지정하거나 나누기를 해야(split(axis=1))
하는 열을 지정하여 가로 축을 따라 배열을 나눌 수 있음
-vsplit (): 세로축을 따라 분할
-dsplit (): 함수는 세 번째 축을 따라 여러 개의 배열로 나눔 . dsplit 은 3차원
이상 배열에서만 동작
reshape(): 튜플 형식으로 지정시 해당 인덱스로 나눔

-split(axis=) > 0:vsplit()	1:hsplit()		2:dsplit()

-array_split():indices_or_sections 를 축을 똑같이 나누지 않는 정수로 사용할 수 있다 는 것이 차이점

4. 복사와 뷰
:단순한 할당은 배열 객체나 데이터의 사본을 만들지 않음

-뷰: 동일한 데이터를 공유 할 수 있는 다른 객체
-view(): 동일한 데이터를 보는 새로운 배열 객체를 생성
>s[:,:] 형식으로 배열을 자르면 뷰가 반환 . 배열을 자르고 할당할 경우 원본 배열의 값이 바뀔 수 있음
ex)
c = a.view()
c.flags.owndata > False

-copy()
:배열 및 해당 데이터의 전체 복사본을 생성
ex)
d = a.copy()
d.flags.owndata > True

5. 고급 인덱싱
:넘파이 배열 이용 인덱싱
>각 차원에 대한 인덱스 배열은 동일한 모양이어야 함
ex)
a = np.arange(12).reshape(3,4)
i = np.array([[0,1], [1,2]])
j = np.array([[2,1], [3,3]])
a[i,j]
>배열을 대상으로 인덱싱을 사용해서 값 변경 가능
ex)a[[0,0,2]] += 1
>논리 배열 인덱스를 이용해서 인덱싱이 가능함
ex)a[a%2==0]
-ix_():N 개의 1 차원 시퀀스 입력받아 추출해서 각각 N 차원인 N개의 출력을 반환
>1 차원을 제외한 모든 차원이 1 리턴

6. 선형대수학

배열 조작
-행렬 곱 : @ 또는 dot()
-역행렬 (Inverse of a matrix): np.linalg.inv (x)
-단위행렬 (Identity matrix): np.eye (n)
-대각합 (Trace): np.trace (x)
-연립방정식 해 풀기 (Solve a linear matrix equation):
>np.linalg.solve (a, b)
-대각행렬 (Diagonal matrix): np.diag (x)
-내적 (Dot product, Inner product): np.dot(a, b)

ex)
x = [32,67,96,118,216,114,152,158]#독립변수
y = [18,24,61.5,49,52,105,130,125]#종속변수
A = np.column_stack((x, np.ones(len(x))))
B = np.array(y).reshape(len(y),1)
X = np.linalg.inv(A.T @ A) @ A.T @ B
plt.scatter(x,y)
plt.plot(A[:,0], A[:,0]*X[0]+X[1], '-')
