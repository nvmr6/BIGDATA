[12] 데이터 프레임과 시리즈
8. 데이터 그룹화 및 집계

-groupby: 데이터를 구분 할 수 있는 열의 값들을 이용하여 데이터를 여러 기준에 의해 구분하여 그룹화
>인수로 그룹화 할 열을 지정, 리스트 형식으로 지정 가능
ex)iris_grouped = iris_df.groupby(iris_df.Species, iris['Sepal.Length'])
>기초 통계 함수 적용

-그룹간 반복 처리
:그룹화 된 데이터에서 그룹의 타입 과 그룹 객체를 반복문을 이용해 처리 가능
ex)
for idx, (spe_name,group) in enumerate(iris_group):
    print(idx,'번째 그룹',spe_name)
    print(group.head(3))
-원핫인코딩
:레이블링
ex)
from sklearn .preprocessing import LabelEncoder
le = LabelEncoder()
iris_df['species'] = le.fit_transform(iris_df.Species) #라벨링

9. 데이터 구조 변경
-와이드 포맷: 가로로 긴 데이터 구조, 열 단위 데이터, 피벗 테이블
-롱 포맷: 세로로 긴 데이터 구조, 행 단위 데이터, 언 피벗 테이블

-melt(): 와이드 > 롱 포맷 변형
ex)
airquality_melt = airquality_data.melt(id_vars=['Month', 'Day'], var_name='VAR', value_name='VAL') #컬럼으로 남는 변수
airquality_melt #롱 포맷

-피벗 테이블: 롱 > 와이드 포맷 변형
ex)
airquality2 = airquality_melt.pivot_table(index=['Month','Day'], columns=['VAR'],values=['VAL'])
airquality2 = airquality2.reset_index(level=['Month', 'Day'], col_level=1)
airquality2.columns = airquality2.columns.droplevel(level=0)
> 와이드 포맷

10. 데이터 프레임에 함수 적용시키기
-apply(): 데이터 프레임이나 시리즈에 각 열 또는 각 행에 함수 적용
ex)
X.apply(np.sum, axis=0) #열별 합
X.apply(np.sum, axis=1) #행별 합

-applymap(): 데이터 요소 하나하나에 함수 적용

11. 일괄변경하기
:결측치나 특정값 대치
ex)
df.fillna(0)# 모든 결측치를 0으로 채움
df.fillna(method="bfill")#다음값으로 채움
df.fillna(method="bfill")#다음값으로 채움

-replace(to_value,new_value,inplace=False)
:값 변경
*False: 내용만 반환, True: 데이터 프레임 적용후 반환되지 않음