[21] JDBC
:자바 프로그램이 데이터 베이스와 연결되어 데이터를 주고 받을 수 있게 해 주는 프로그래밍 인터페이스이다. 

-JDBC Driver
Oracle - ojdbc6.JAR  / MySQL - mysql-connector-java-8.0.22.jar

*JDBC프로그래밍 단계와 사용 클래스
(1) JDBC 드라이버 로드 (JDBC 드라이버를 로드한다) : Class.forName()을 이용. 드라이버 클래스 로딩(드라이버 필요)
>사용 API : Class.ForName()

(2)데이터베이스 연결 (DB에 연결한다) : DriverManager.getConnection()을 이용해 Connection 객체 생성(접속 URL, id, passwd등 필요)
>사용 API : java.sql.Connection

(3)Statement 생성 (SQL문을 수행할 객체 생성한다) : SQL을 이용해 DB를 조회하거나 다룸. Statement는 SQL 처리 기본 객체
>사용 API : java.sql.Statement / java.sql.preparedStatement

(4)SQL문 전송 (SQL문 수행전송하고 결과 받는다): SQL 문 Statement 객체의 executeQuery(), executeUpdate() 메소드를 이용, 데이터베이스로 전달해 처리
>사용 API : java.sql.Statement.executeQuery() / java.sql.Statement.executeUpdate()

(5)결과 받기 : SQL 실행 결과를 반환 받아야 하는 값이 있따면 ResultSet객체로 받음
>사용 API : java.sql.ResultSet

(6)결과 받아 원하는 로직 수행 (수행한 결과를 읽어 원하는 로직을 수행한다 (필요할 때까지 반복)

(7)연결 해제 ( DB 연결을 끊는다) : 사용한 자원을 반납함
>사용 API : java.sql.Connection.close()


*조회
Statement객체 : 이전 단계에서 생성한 Connection 객체(conn)로 접근해서 createStatement()메소드를 호출하여 생성한다.
Statement stmt = conn.createStatement();

*질의문 수행
String str = “SELECT * FROM EMP;
ResultSet rs= stmt.excuteQuery(str);

*INSERT
Stmt.excuteUpdate(sql)
>입력, 수정, 삭제(insert, update, delete)시 사용. 반환값이 정수형을 반환.
 작업에 성공한 횟수 리턴하여 DML명령어(insert, update, delete)가 제대로 수행되었는지 체크


1. Oracle
String driver = "oracle.jdbc.driver.OracleDriver";
String url = "jdbc:oracle:thin:@127.0.0.1:1521:xe";
Connection conn = null; //DB연결 객체 변수
Statement stmt = null; //SQL 전송 객체 변수
ResultSet rs = null; //SELECT문 결과 받는 객체 변수
String sql = "oracle문";
try {
	Class.forName(driver);//1. 드라이버 로드
	conn = DriverManager.getConnection(url, "scott", "tiger");//2. DB 연결
	stmt = conn.createStatement();//3 SQL 전공 객체 생성
	rs = stmt.executeQuery(sql);//4. SQL전송 > 5. SQL 결과 수신
	//6. SQL 결과 출력 > rs 콘솔 출력
	while(rs.next()) {
		실행문
	}
} catch (ClassNotFoundException e) {
	System.out.println(e.getMessage());
} catch (SQLException e) {
	System.out.println(e.getMessage());
}finally {
	try {
		if(rs!=null) rs.close();
		if(stmt!=null) stmt.close();
		if(conn!=null) conn.close(); //생성 역순으로 객체 변수 close
	} catch (SQLException e) {
		System.out.println(e.getMessage());
	}
}

2.MySQL
String driver = "com.mysql.cj.jdbc.Driver";
String url = "jdbc:mysql://localhost:3306/kimdb?serverTimezone=UTC";
Connection conn = null;//DB연결 객체 변수
Statement stmt = null;//SQL 전송 객체 변수
ResultSet rs = null;//SELECT문 결과 받는 객체 변수
String query = "SQL문";
try {
	Class.forName(driver);//1. 드라이버 로드
	conn = DriverManager.getConnection(url, "scott", "tiger");//2. DB 연결
	stmt = conn.createStatement();//3 SQL 전공 객체 생성
	rs = stmt.executeQuery(sql);//4. SQL전송 > 5. SQL 결과 수신
	//6. SQL 결과 출력 > rs 콘솔 출력
	while(rs.next()) {
		실행문
	}
} catch (ClassNotFoundException e) {
	System.out.println(e.getMessage());
} catch (SQLException e) {
	System.out.println(e.getMessage());
}finally {
	try {
		if(rs!=null) rs.close();
		if(stmt!=null) stmt.close();
		if(conn!=null) conn.close(); //생성 역순으로 객체 변수 close
	} catch (SQLException e) {
		System.out.println(e.getMessage());
	}
}