6)Before OOP
메소드: 로직을 미리 만들고 메소드가 데이터를 받아 결과값으로 반환
객체: 동일한 성질의 데이터와 메소드를 모아두어 필요한 곳에 사용한다.

ex) 접근제한자 [static] 리턴type 메소드명(매개변수1, 매개변수2,..){ 
		//return이 없을 경우 리턴type은 void
		처리할 명령문
		[return 리턴값;]
}

7)OOP
-객체와 클래스: 객체의 설계도면인 클래스를 생성하고 이를 이용하여 객체를 생성한다. 
객체(데이터+메소드)는 클래스로부터 메모리에 생성된다.
-데이터는 주로 private, 메소드는 주로 public으로 생성한다.

생성 > className classObject = new className();
:new를 통해 생성되고 이후 완전한 독립체가 된다. static이 있을 시 객체 생성 없이 접근이 가능하다.

8)Class
-생성자 함수: 클래스명과 똑같이 리턴이 없는 메소드를 생성자 함수라고 한다. 객체 생성시 호출된다.
모든 클래스는 하나 이상의 생성자를 갖어야 하며 없을시 JVM이 자동 호출한다. 생성자 함수는 매개변수
의 수를 다양하게 가질 수 있다. 디폴트 생성자를 만들어 주어야 한다.(생성자 오버로딩)

-getter/setter: 변수를 가지고 오거나 초기화하는 함수를 따로 생성한다.
