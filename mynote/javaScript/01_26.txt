[6] 객체
:배열 내부에 있는 값을 요소, 객체 내부에 있는 값은 속성. 
객체 속성 중 함수형 자료형인 속성을 특별히 메서드라고 부른다.
ex)
var object = {
            number: 273,
            string: 'RintIanTta',
            boolean: true,
            array: [52, 273, 103, 32],
            method: function () {}
 }; 
-출력시 for-in문이나 for-each문 이용
ex)
var output = '';
        for (var key in product) {
            output += key + ': ' + product[key] + '\n';
        }
 alert(output);

*객체 관련 키워드
-in 키워드:해당 키가 객체 안에 있는지 확인
>true/false로 리턴

-with 키워드
ex)
var output = '';
        with (student) {
            output += 'name : ' + name + '\n';
            output += 'kor : ' + kor + '\n';
            output += 'mat: ' + mat + '\n';
            output += 'eng: ' + eng + '\n';
            output += 'sci: ' + sci + '\n';
        }
>코드 간결화

*객체 속성 추가와 제거
>메서드도 가능

*toString
        student.toString = function () {
            var output = '';
            for (var key in this) {
                // toString() 메서드는 출력하지 않게
                if (key != 'toString') {
                    output += key + '\t' + this[key] + '\n';
                }
            }
            return output;
        };

제거는 delete 이용
delete (student.hope); // 속성을 제거	


*객체 배열
ex)
var students = [];
students.push({ name: '윤인성', kor: 87, mat: 98, eng: 88, sci: 95 });
students.push({ name: '연하진', kor: 92, mat: 98, eng: 96, sci: 98 });
>객체 추가

함수이용
>function makeStudent(name, korean, math, english, science) {
            var willReturn = {
                // 속성
                name: name,
                kor: korean,
                mat: math,
                eng: english,
                sci: science,

                // 메서드
                getSum: function () {
                    return this.kor + this.mat + this.eng + this.sci;
                },
                getAverage: function () {
                    return this.getSum() / 4;
                },
                toString: function () {
                    return this.이름 + '\t' + this.getSum() + '\t' + this.getAverage();
                }
            };
            return willReturn;
        }
>메서드 파트는 객체가 중복되기 때문에 프로토타입을 이용하여 함수 밖에서 정의한다.


[7]생성자 함수

*생성자: 객체지향 프로그램에서 객체를 생성할 때 호출되는 단위 메서드
>
function 생성자함수명(속성명들) {
            ...
       }
var 객체명 = new 생성자함수명(속성값들); 

*프로토타입: 생성자 함수로 생성된 객체가 공통으로 가지는 공간
ex)
Student.prototype.getSum = function () { return this.kor + this.eng + this.mat; };
Student.prototype.getAvg = function () { return Math.round(this.getSum() / 3 * 10) / 10; };
Student.prototype.toString = function () { return this.name + '\t' + this.getSum() + '\t' + this.getAvg(); };

*new 키워드
>함수 호출시 객체를 위한 메모리 생성, this는 해당 공간을 의미

*캡슐화
:속성이나 메서드를 사용자가 바로 사용할 수 없게 막는 기술, 
숨겨 놓은 특정 속성은 getter와 setter를 이용하여 간접적으로 접근 
ex)
        function Rectangle(w, h) {
            var width = w;
            var height = h;
            this.getWidth = function () { return width; };
            this.getHeight = function () { return height; };
            this.setWidth = function (w) { width = w;};
            this.setHeight = function (h) { height = h;};
        }	
        Rectangle.prototype.getArea = function () {
            return this.getWidth() * this.getHeight();
        };

*상속
:기존의 생성자 함수나 객체를 기반으로 새로운 생성자 함수나 객체를 쉽게 만드는 것
ex)
function Square(length) {
            this.base = Rectangle;
            this.base(length, length);
        }//상속
        Square.prototype = Rectangle.prototype;
        var rectangle = new Rectangle(5, 7);
        var square = new Square(5);
        alert(rectangle.getArea() + ':' + square.getArea());
